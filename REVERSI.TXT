


def getPlayerMove(board, playerTile):
    # Let the player type in their move.
    # Returns the move as [x, y] (or returns the strings 'hints' or 'quit')
    DIGITS1TO8 = '1 2 3 4 5 6 7 8'.split()
    while True:
        print('Enter your move, or type quit to end the game, or hints to turn off/on hints.')
        move = input().lower()
        if move == 'quit':
            return 'quit'
        if move == 'hints':
            return 'hints'

        if len(move) == 2 and move[0] in DIGITS1TO8 and move[1] in DIGITS1TO8:
            x = int(move[0]) - 1
            y = int(move[1]) - 1
            if isValidMove(board, playerTile, x, y) == False:
                continue
            else:
                break
        else:
            print('That is not a valid move. Type the x digit (1-8), then the y digit (1-8).')
            print('For example, 81 will be the top-right corner.')
    return [x, y]



def getComputerMove(board, computerTile):
    # Given a board and the computer's tile, determine where to
    # move and return that move as a [x, y] list.
    possibleMoves = getValidMoves(board, computerTile)


219.     # randomize the order of the possible moves

220.     random.shuffle(possibleMoves)

221.

222.     # always go for a corner if available.

223.     for x, y in possibleMoves:

224.         if isOnCorner(x, y):

225.             return [x, y]

226.

227.     # Go through all the possible moves and remember the best scoring move

228.     bestScore = -1

229.     for x, y in possibleMoves:

230.         dupeBoard = getBoardCopy(board)

231.         makeMove(dupeBoard, computerTile, x, y)

232.         score = getScoreOfBoard(dupeBoard)[computerTile]

233.         if score > bestScore:

234.             bestMove = [x, y]

235.             bestScore = score

236.     return bestMove

237.

238.

239. def showPoints(playerTile, computerTile):

240.     # Prints out the current score.

241.     scores = getScoreOfBoard(mainBoard)

242.     print('You have %s points. The computer has %s points.' % (scores[playerTile], scores[computerTile]))

243.

244.

245.

246. print('Welcome to Reversi!')

247.

248. while True:

249.     # Reset the board and game.

250.     mainBoard = getNewBoard()

251.     resetBoard(mainBoard)

252.     playerTile, computerTile = enterPlayerTile()

253.     showHints = False

254.     turn = whoGoesFirst()

255.     print('The ' + turn + ' will go first.')

256.

257.     while True:

258.         if turn == 'player':

259.             # Player's turn.

260.             if showHints:

261.                 validMovesBoard = getBoardWithValidMoves(mainBoard, playerTile)

262.                 drawBoard(validMovesBoard)

263.             else:

264.                 drawBoard(mainBoard)

265.             showPoints(playerTile, computerTile)

266.             move = getPlayerMove(mainBoard, playerTile)

267.             if move == 'quit':

268.                 print('Thanks for playing!')

269.                 sys.exit() # terminate the program

270.             elif move == 'hints':

271.                 showHints = not showHints

272.                 continue

273.             else:

274.                 makeMove(mainBoard, playerTile, move[0], move[1])

275.

276.             if getValidMoves(mainBoard, computerTile) == []:

277.                 break

278.             else:

279.                 turn = 'computer'

280.

281.         else:

282.             # Computer's turn.

283.             drawBoard(mainBoard)

284.             showPoints(playerTile, computerTile)

285.             input('Press Enter to see the computer\'s move.')

286.             x, y = getComputerMove(mainBoard, computerTile)

287.             makeMove(mainBoard, computerTile, x, y)

288.

289.             if getValidMoves(mainBoard, playerTile) == []:

290.                 break

291.             else:

292.                 turn = 'player'

293.

294.     # Display the final score.

295.     drawBoard(mainBoard)

296.     scores = getScoreOfBoard(mainBoard)

297.     print('X scored %s points. O scored %s points.' % (scores['X'], scores['O']))

298.     if scores[playerTile] > scores[computerTile]:

299.         print('You beat the computer by %s points! Congratulations!' % (scores[playerTile] - scores[computerTile]))

300.     elif scores[playerTile] < scores[computerTile]:

301.         print('You lost. The computer beat you by %s points.' % (scores[computerTile] - scores[playerTile]))

302.     else:

303.         print('The game was a tie!')

304.

305.     if not playAgain():

306.         break